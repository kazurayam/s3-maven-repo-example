import com.amazonaws.auth.profile.ProfileCredentialsProvider
import com.amazonaws.services.s3.model.ObjectMetadata

/**
 * baseball-service/build.gradle
 */

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.2.5.RELEASE'
        classpath 'com.amazonaws:aws-java-sdk-core:1.11.745'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'jp.classmethod.aws' version '0.41'
    id 'jp.classmethod.aws.s3' version '0.41'
}

jar {
    archiveBaseName = 'baseball-service'
    archiveVersion =  '0.0.1'
}

ext {
    awsCredentials = new ProfileCredentialsProvider().credentials
}

repositories {
    maven {
        url "s3://${repoBucketName}/releases"
        credentials(AwsCredentials) {
            accessKey awsCredentials.AWSAccessKeyId
            secretKey awsCredentials.AWSSecretKey
        }
    }
    mavenLocal()
    jcenter()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.2.5.RELEASE'

    implementation('com.jacobaseverson.player:player-api:0.0.1')
}

/**
 * baseball-serviceプロジェクトのconfiguration.runtime に含まれている
 * jarファイルを取り出して一時的ディレクトリに置く。
 * player-api-x.x.x.jarだけでなくspringやtomcatのjarも一緒に一時的ディレクトリに出力される。 
 *
 * https://dzone.com/articles/using-gradle-with-aws-and-s3-w-defaultawscredentia
 */
task extractRuntimeLibs(type:Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/tmp/runtimeClasspath"
}

task transferArtifact(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask) {
    bucketName "${artifactsBucketName}"
    file file("${buildDir}/tmp/runtimeClasspath/player-api-0.0.1.jar")
    key "player-api-0.0.1.jar"
    def m = new ObjectMetadata()
    m.setCacheControl("no-cache, no-store")
    objectMetadata = m
}
transferArtifact.dependsOn extractRuntimeLibs