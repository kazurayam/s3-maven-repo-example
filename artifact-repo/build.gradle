import com.amazonaws.auth.policy.Policy
import com.amazonaws.auth.policy.Principal
import com.amazonaws.auth.policy.Statement
import com.amazonaws.auth.policy.actions.S3Actions
import com.amazonaws.auth.policy.resources.S3BucketResource
import com.amazonaws.auth.policy.resources.S3ObjectResource

import jp.classmethod.aws.gradle.s3.CreateBucketTask
import jp.classmethod.aws.gradle.s3.BucketPolicyTask

/**
 * artifact-repo/build.gradle
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.41"
    }
}

plugins {
    id 'jp.classmethod.aws' version '0.41'
    id 'jp.classmethod.aws.s3' version '0.41'
}

aws {
    profileName = 'default' // Note: change if not using default profile in ~/.aws/credentials
    region = 'ap-northeast-1'
}

task create(type: CreateBucketTask) {
    bucketName "${repoBucketName}"
    region 'ap-northeast-1'
    ifNotExists true
}

task setBucketPolicy(type: BucketPolicyTask, dependsOn: create) {
    bucketName "${repoBucketName}"
    policy new Policy().withStatements(
            new Statement(Statement.Effect.Allow)
            .withPrincipals(Principal.AllUsers)
            .withActions(S3Actions.GetObject)
            .withResources(new S3ObjectResource("${repoBucketName}", '*')),
            new Statement(Statement.Effect.Allow)
            .withPrincipals(Principal.AllUsers)
            .withActions(S3Actions.ListObjects)
            .withResources(new S3BucketResource("${repoBucketName}"))
    )
}
